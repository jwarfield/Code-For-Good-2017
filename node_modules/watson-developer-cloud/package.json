{
  "_args": [
    [
      {
        "raw": "watson-developer-cloud",
        "scope": null,
        "escapedName": "watson-developer-cloud",
        "name": "watson-developer-cloud",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/pablo/Development/pablomd314/team-15"
    ]
  ],
  "_from": "watson-developer-cloud@latest",
  "_id": "watson-developer-cloud@2.39.2",
  "_inCache": true,
  "_location": "/watson-developer-cloud",
  "_nodeVersion": "6.11.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/watson-developer-cloud-2.39.2.tgz_1506697521694_0.8634142489172518"
  },
  "_npmUser": {
    "name": "nfriedly",
    "email": "nathan@nfriedly.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "watson-developer-cloud",
    "scope": null,
    "escapedName": "watson-developer-cloud",
    "name": "watson-developer-cloud",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/watson-developer-cloud/-/watson-developer-cloud-2.39.2.tgz",
  "_shasum": "9554cacb41efc6b5d502ca939cd856a57bc70192",
  "_shrinkwrap": null,
  "_spec": "watson-developer-cloud",
  "_where": "/home/pablo/Development/pablomd314/team-15",
  "author": {
    "name": "IBM Corp."
  },
  "bugs": {
    "url": "https://github.com/watson-developer-cloud/node-sdk/issues"
  },
  "contributors": [
    {
      "name": "German Attanasio Ruiz",
      "email": "germanatt@us.ibm.com"
    },
    {
      "name": "Nathan Friedly",
      "email": "nfriedly@us.ibm.com"
    },
    {
      "name": "Jeff Stylos",
      "email": "jsstylos@us.ibm.com"
    }
  ],
  "dependencies": {
    "async": "^2.5.0",
    "buffer-from": "^0.1.1",
    "cookie": "~0.3.1",
    "csv-stringify": "~1.0.2",
    "extend": "~3.0.0",
    "isstream": "~0.1.2",
    "object.omit": "~3.0.0",
    "object.pick": "~1.3.0",
    "request": "~2.83.0",
    "solr-client": "^0.7.0",
    "vcap_services": "~0.3.0",
    "websocket": "~1.0.22"
  },
  "description": "Client library to use the IBM Watson Services and AlchemyAPI",
  "devDependencies": {
    "browserify": "^14.4.0",
    "concat-stream": "^1.5.1",
    "dependency-lint": "^5.0.1",
    "eslint": "^4.7.2",
    "eslint-config-google": "^0.9.1",
    "eslint-config-prettier": "^2.6.0",
    "eslint-plugin-node": "^5.2.0",
    "eslint-plugin-prettier": "^2.3.1",
    "jsdoc": "^3.5.5",
    "karma": "^1.7.1",
    "karma-browserify": "^5.0.5",
    "karma-chrome-launcher": "^2.2.0",
    "karma-firefox-launcher": "^1.0.0",
    "karma-mocha": "^1.1.1",
    "memory-fs": "^0.4.1",
    "mocha": "^3.5.3",
    "nock": "^9.0.22",
    "object.assign": "^4.0.4",
    "prettier": "^1.7.2",
    "shebang-loader": "0.0.1",
    "uglify-js": "^3.1.2",
    "watchify": "^3.7.0",
    "wav": "^1.0.0",
    "webpack": "^3.6.0"
  },
  "directories": {},
  "dist": {
    "shasum": "9554cacb41efc6b5d502ca939cd856a57bc70192",
    "tarball": "https://registry.npmjs.org/watson-developer-cloud/-/watson-developer-cloud-2.39.2.tgz"
  },
  "engines": {
    "node": ">=4"
  },
  "gitHead": "d13a618d3c50e2df8808d85e9ad9dc6d6720b0f6",
  "homepage": "https://github.com/watson-developer-cloud/node-sdk#readme",
  "keywords": [
    "ibm",
    "watson",
    "wdc",
    "watson developer cloud",
    "chatbot",
    "message resonance",
    "user modeling",
    "dialog",
    "personality insights",
    "machine translation",
    "concept expansion",
    "question and answer",
    "relationship extraction",
    "language identification",
    "language translation",
    "visual recognition ",
    "speech to text",
    "text to speech",
    "concept insights",
    "tradeoff analytics",
    "tone analyzer",
    "retrieve and rank",
    "natural language classifier",
    "dialog",
    "tone_analyzer",
    "alchemy",
    "alchemyapi",
    "alchemy vision",
    "alchemy language",
    "alchemy datanews",
    "conversation"
  ],
  "license": "Apache-2.0",
  "main": "./index",
  "maintainers": [
    {
      "name": "germanattanasio",
      "email": "germanattanasio@gmail.com"
    },
    {
      "name": "kognate",
      "email": "kognate@gmail.com"
    },
    {
      "name": "nfriedly",
      "email": "nathan@nfriedly.com"
    }
  ],
  "name": "watson-developer-cloud",
  "optionalDependencies": {},
  "readme": "Watson Developer Cloud Node.js SDK\n============================================\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/460c1d01a56942dbb7dd15d9ee0da535)](https://www.codacy.com/app/gattana/node-sdk?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=watson-developer-cloud/node-sdk&amp;utm_campaign=Badge_Grade)\n[![Build Status](https://secure.travis-ci.org/watson-developer-cloud/node-sdk.svg)](http://travis-ci.org/watson-developer-cloud/node-sdk)\n[![Dependency Status](https://gemnasium.com/watson-developer-cloud/node-sdk.svg)](https://gemnasium.com/watson-developer-cloud/node-sdk)\n[![npm-version](https://img.shields.io/npm/v/watson-developer-cloud.svg)](https://www.npmjs.com/package/watson-developer-cloud)\n[![npm-downloads](https://img.shields.io/npm/dm/watson-developer-cloud.svg)](https://www.npmjs.com/package/watson-developer-cloud)\n\nNode.js client library to use the Watson Developer Cloud services, a collection of APIs that use cognitive computing to solve complex problems.\n\n## Table of Contents\n  * [Major Changes for v2](#major-changes-for-v2)\n  * [Installation](#installation)\n  * [Usage](#usage)\n  * [Documentation](#documentation)\n  * [Getting the Service Credentials](#getting-the-service-credentials)\n  * [Questions](#questions)\n  * [Examples](#examples)\n  * [IBM Watson Services](#ibm-watson-services)\n    * [AlchemyLanguage](#alchemylanguage)\n    * [AlchemyData News](#alchemydata-news)\n    * [Authorization](#authorization)\n    * [Conversation](#conversation)\n    * [Dialog](#dialog)\n    * [Discovery](#discovery)\n    * [Document Conversion](#document-conversion)\n    * [Language Translator](#language-translator)\n    * [Natural Language Classifier](#natural-language-classifier)\n    * [Natural Language Understanding](#natural-language-understanding)\n    * [Personality Insights](#personality-insights)\n    * [Retrieve and Rank](#retrieve-and-rank)\n    * [Speech to Text](#speech-to-text)\n    * [Text to Speech](#text-to-speech)\n    * [Tone Analyzer](#tone-analyzer)\n    * [Tradeoff Analytics](#tradeoff-analytics)\n    * [Visual Recognition](#visual-recognition)\n    * [Removed Services](#removed-services)\n  * [Composing Services](#composing-services)\n  * [Debug](#debug)\n  * [Tests](#tests)\n  * [Open Source @ IBM](#open-source--ibm)\n  * [License](#license)\n  * [Contributing](#contributing)\n\n\n## Major changes for v2\n\n### BREAKING: user-supplied credentials are now preferred over Bluemix-supplied credentials.\n\nSee [Usage](#usage) section for details.\n\nThis change also removes the `use_vcap_services` flag.\n\n### Client-side usage is partially supported\n\nSee [Client-side usage](#client-side-usage) section for details.\n\n### New recommended method for instantiating services:\n\n```js\nvar ToneAnalyzerV3 = require('watson-developer-cloud/tone-analyzer/v3');\n\nvar toneAnalyzer = new ToneAnalyzerV3({/*...*/});\n```\n\nThis was primarily done to enable smaller bundles for client-side usage, but also gives a small performance boost for server-side usage by only loading the portion of the library that is actually needed.\n\nThe following methods will also work, but cause the entire library to be loaded:\n\n```js\n// Alternate methods of using the library.\n// Not recommended, especially for client-side JS.\nvar watson = require('watson-developer-cloud');\n\nvar toneAnalyzer = new watson.ToneAnalyzerV3({/*...*/});\n\nvar tone_analyzer = watson.tone_analyzer({version: 'v3', /*...*/});\n```\n\n## Installation\n\n```sh\n$ npm install watson-developer-cloud --save\n```\n\n## Usage\n\nThe examples below assume that you already have service credentials. If not,\nyou will have to create a service in [Bluemix][bluemix].\n\nIf you are running your application in Bluemix, you don't need to specify the\ncredentials; the library will get them for you by looking at the `VCAP_SERVICES` environment variable.\n\nCredentials are checked for in the following order:\n\n1. Hard-coded or programatic credentials passed to the service constructor\n\n2. `SERVICE_NAME_USERNAME` and `SERVICE_NAME_PASSWORD` environment properties (or `SERVICE_NAME_API_KEY` when appropriate) and, optionally, `SERVICE_NAME_URL`\n\n3. Bluemix-supplied credentials (via the `VCAP_SERVICES` JSON-encoded environment property)\n\n### Client-side usage\nSee the `examples/` folder for [Browserify](http://browserify.org/) and [Webpack](http://webpack.github.io/) client-side SDK examples (with server-side generation of auth tokens.)\n\nNote: not all services currently support CORS, and therefore not all services can be used client-side.\nOf those that do, most require an auth token to be generated server-side via the [Authorization Service](#authorization).\n\n### Data collection opt-out\n\nBy default, [all requests are logged](https://console.bluemix.net/docs/services/watson/getting-started-logging.html). This can be disabled of by setting the `X-Watson-Learning-Opt-Out` header when creating the service instance:\n\n```js\nvar myInstance = new watson.WhateverServiceV1({\n  /* username, password, version, etc... */\n  headers: {\n    \"X-Watson-Learning-Opt-Out\": true\n  }\n});\n```\n\n## Documentation\n\nYou can find links to the documentation at https://www.ibm.com/watson/developercloud/doc/index.html. Find the service that you're interested in, click **API reference**, and then select the **Node** tab.\n\nThere are also auto-generated JSDocs available at http://watson-developer-cloud.github.io/node-sdk/latest/\n\n## Getting the service credentials\nYou will need the `username` and `password` (`api_key` for AlchemyAPI) credentials for each service. Service credentials are different from your Bluemix account username and password.\n\nTo get your service credentials, follow these steps:\n\n1.  Log in to Bluemix at https://bluemix.net.\n1.  Create an instance of the service:\n    1.  In the Bluemix **Catalog**, select the service you want to use.\n    1.  Type a unique name for the service instance in the **Service name** field. For example, type `my-service-name`. Leave the default values for the other options.\n    1.  Click **Create**.\n    1.  From the service dashboard, click **Service credentials**.\n    1.  Click **View credentials** under **Actions**.\n    1.  Copy `username` and `password` (or `api_key` for Visual Recognition).\n\n## Questions\n\nIf you are having difficulties using the APIs or have a question about the Watson services, please ask a question at [dW Answers](https://developer.ibm.com/answers/questions/ask/?topics=watson) or [Stack Overflow](http://stackoverflow.com/questions/ask?tags=ibm-watson-cognitive).\n\n## Examples\nThe [examples][examples] folder has basic and advanced examples.\n\n## IBM Watson services\nThe Watson Developer Cloud offers a variety of services for building cognitive\napps.\n\n### AlchemyLanguage\n[AlchemyLanguage][alchemy_language] offers 12 API functions as part of its text analysis service, each of which uses sophisticated natural language processing techniques to analyze your content and add high-level semantic information.\n\nUse the [Sentiment Analysis][sentiment_analysis] endpoint to identify positive/negative sentiment within a sample text document.\n\n```javascript\nvar AlchemyLanguageV1 = require('watson-developer-cloud/alchemy-language/v1');\n\nvar alchemy_language = new AlchemyLanguageV1({\n  api_key: 'API_KEY'\n});\n\nvar params = {\n  text: 'IBM Watson won the Jeopardy television show hosted by Alex Trebek'\n};\n\nalchemy_language.sentiment(params, function (err, response) {\n  if (err)\n    console.log('error:', err);\n  else\n    console.log(JSON.stringify(response, null, 2));\n});\n```\n\n### AlchemyData News\n[Alchemy Data News][alchemy_data_news] indexes 250k to 300k English language news and blog articles every day with historical search available for the past 60 days.\nExample: Get the volume data from the last 7 days using 12hs of time slice.\n\n```javascript\nvar AlchemyDataNewsV1 = require('watson-developer-cloud/alchemy-data-news/v1');\n\nvar alchemy_data_news = new AlchemyDataNewsV1({\n  api_key: '<api_key>'\n});\n\nvar params = {\n  start: 'now-1d',\n  end: 'now'\n};\n\nalchemy_data_news.getNews(params, function (err, news) {\n  if (err)\n    console.log('error:', err);\n  else\n    console.log(JSON.stringify(news, null, 2));\n});\n```\n\n### Authorization\nThe Authorization service can generate auth tokens for situations where providing the service username/password is undesirable.\n\nTokens are valid for 1 hour and may be sent using the `X-Watson-Authorization-Token` header or the `watson-token` query param.\n\nNote that the token is supplied URL-encoded, and will not be accepted if it is double-encoded in a querystring.\n\n```javascript\nvar watson = require('watson-developer-cloud');\n\nvar authorization = new watson.AuthorizationV1({\n  username: '<Text to Speech username>',\n  password: '<Text to Speech password>',\n  url: watson.TextToSpeechV1.URL\n});\n\nauthorization.getToken(function (err, token) {\n  if (!token) {\n    console.log('error:', err);\n  } else {\n    // Use your token here\n  }\n});\n```\n\n\n### Conversation\n\nUse the [Conversation][conversation] service to determine the intent of a message.\n\nNote: you must first create a workspace via Bluemix. See [the documentation](https://console.bluemix.net/docs/services/conversation/index.html#about) for details.\n\n```js\nvar ConversationV1 = require('watson-developer-cloud/conversation/v1');\n\nvar conversation = new ConversationV1({\n  username: '<username>',\n  password: '<password>',\n  version_date: ConversationV1.VERSION_DATE_2017_05_26\n});\n\nconversation.message({\n  input: { text: 'What\\'s the weather?' },\n  workspace_id: '<workspace id>'\n }, function(err, response) {\n     if (err) {\n       console.error(err);\n     } else {\n       console.log(JSON.stringify(response, null, 2));\n     }\n});\n```\n\n### Dialog\nThe Dialog service was deprecated on August 15, 2016, existing instances of the service will continue to function until August 9, 2017. Users of the Dialog service should migrate their applications to use the Conversation service. See the [migration documentation][dialog_migration] to learn how to migrate your dialogs to the Conversation service.\n\n### Discovery\n\nUse the [Discovery Service][discovery] to search and analyze structured and unstructured data.\n\n```javascript\nvar DiscoveryV1 = require('watson-developer-cloud/discovery/v1');\n\nvar discovery = new DiscoveryV1({\n  username: '<username>',\n  password: '<password>',\n  version_date: DiscoveryV1.VERSION_DATE_2017_04_27\n});\n\ndiscovery.query({\n    environment_id: '<environment_id>',\n    collection_id: '<collection_id>',\n    query: 'my_query'\n  }, function(err, response) {\n        if (err) {\n          console.error(err);\n        } else {\n          console.log(JSON.stringify(response, null, 2));\n        }\n   });\n```\n\n### Document Conversion\n\n```javascript\nvar DocumentConversionV1 = require('watson-developer-cloud/document-conversion/v1');\nvar fs = require('fs');\n\nvar document_conversion = new DocumentConversionV1({\n  username:     '<username>',\n  password:     '<password>',\n  version_date: '2015-12-01'\n});\n\n// convert a single document\ndocument_conversion.convert({\n  // (JSON) ANSWER_UNITS, NORMALIZED_HTML, or NORMALIZED_TEXT\n  file: fs.createReadStream('sample-docx.docx'),\n  conversion_target: document_conversion.conversion_target.ANSWER_UNITS,\n  // Add custom configuration properties or omit for defaults\n  word: {\n    heading: {\n      fonts: [\n        { level: 1, min_size: 24 },\n        { level: 2, min_size: 16, max_size: 24 }\n      ]\n    }\n  }\n}, function (err, response) {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(JSON.stringify(response, null, 2));\n  }\n});\n```\n\nSee the [Document Conversion integration example][document_conversion_integration_example] about how to integrate the Document Conversion service\nwith the Retrieve and Rank service.\n\n\n### Language Translation\n\nThe IBM Watson™ Language Translation service has been rebranded as the Language Translator service.\n\nThe Language Translator service provides the same capabilities as the Language Translation service, but with simpler pricing. For information about migrating existing applications from the Language Translation service to the Language Translator service, see the [Migration documentation][language-translator-migration]\n\n```javascript\nvar LanguageTranslationV2 = require('watson-developer-cloud/language-translation/v2');\n\nvar language_translation = new LanguageTranslationV2({\n  username: '<username>',\n  password: '<password>'\n});\n```\n\n### Language Translator\n\nTranslate text from one language to another or idenfity a language using the [Language Translator][language_translator] service.\n\n**Note:** There is a deprecated Language *Translation* service and a newer Language *Translator* service. The only difference is the pricing structure and the service endpoint.\n\nThe SDK currently defaults to the older endpoint for both `LanguageTranslationV2` and `LanguageTranslatorV2`, but `LanguageTranslatorV2`'s default endpoint will change in the next major release (3.0.0). **To guarantee compatibility, include the `url` when creating a `LanguageTranslatorV2` instance.**\n\nSee [Migrating from Language Translation][language-translator-migration] for more details.\n\n```javascript\nvar LanguageTranslatorV2 = require('watson-developer-cloud/language-translator/v2');\n\nvar language_translator = new LanguageTranslatorV2({\n  username: '<username>',\n  password: '<password>',\n  url: 'https://gateway.watsonplatform.net/language-translator/api/'\n});\n\nlanguage_translator.translate({\n  text: 'A sentence must have a verb', source : 'en', target: 'es' },\n  function (err, translation) {\n    if (err)\n      console.log('error:', err);\n    else\n      console.log(JSON.stringify(translation, null, 2));\n});\n\nlanguage_translator.identify({\n  text: 'The language translator service takes text input and identifies the language used.' },\n  function (err, language) {\n    if (err)\n      console.log('error:', err);\n    else\n      console.log(JSON.stringify(language, null, 2));\n});\n```\n\n### Natural Language Classifier\n\nUse [Natural Language Classifier](https://console.bluemix.net/docs/services/natural-language-classifier/getting-started.html) service to create a classifier instance by providing a set of representative strings and a set of one or more correct classes for each as training. Then use the trained classifier to classify your new question for best matching answers or to retrieve next actions for your application.\n\n```javascript\nvar NaturalLanguageClassifierV1 = require('watson-developer-cloud/natural-language-classifier/v1');\n\nvar natural_language_classifier = new NaturalLanguageClassifierV1({\n  username: '<username>',\n  password: '<password>'\n});\n\nnatural_language_classifier.classify({\n  text: 'Is it sunny?',\n  classifier_id: '<classifier-id>' },\n  function(err, response) {\n    if (err)\n      console.log('error:', err);\n    else\n      console.log(JSON.stringify(response, null, 2));\n});\n```\n\nSee this [example](https://github.com/watson-developer-cloud/node-sdk/blob/master/examples/natural_language_classifier.v1.js) to learn how to create a classifier.\n\n### Natural Language Understanding\n\nUse Natural Language Understanding is a collection of natural language processing APIs that help you understand sentiment,\n keywords, entities, high-level concepts and more.\n\n```javascript\nvar fs = require('fs');\nvar NaturalLanguageUnderstandingV1 = require('watson-developer-cloud/natural-language-understanding/v1.js');\n\nvar nlu = new NaturalLanguageUnderstandingV1({\n  username: '<username>',\n  password: '<password>',\n  version_date: NaturalLanguageUnderstandingV1.VERSION_DATE_2017_02_27\n});\n\nnlu.analyze({\n  'html': file_data, // Buffer or String\n  'features': {\n    'concepts': {},\n    'keywords': {},\n  }\n}, function(err, response) {\n     if (err)\n       console.log('error:', err);\n     else\n       console.log(JSON.stringify(response, null, 2));\n });\n\n```\n\n### Personality Insights\nAnalyze text in English and get a personality profile by using the\n[Personality Insights][personality_insights] service.\n\n```javascript\nvar PersonalityInsightsV3 = require('watson-developer-cloud/personality-insights/v3');\n\nvar personality_insights = new PersonalityInsightsV3({\n  username: '<username>',\n  password: '<password>',\n  version_date: '2016-10-19'\n});\n\npersonality_insights.profile({\n  text: 'Enter more than 100 unique words here...',\n  consumption_preferences: true\n  },\n  function (err, response) {\n    if (err)\n      console.log('error:', err);\n    else\n      console.log(JSON.stringify(response, null, 2));\n});\n```\n\n**Note:** Don't forget to update the `text` variable!\n\n### Retrieve and Rank\nUse the [Retrieve and Rank][retrieve_and_rank] service to enhance search results with machine learning.\n\n```javascript\nvar RetrieveAndRankV1 = require('watson-developer-cloud/retrieve-and-rank/v1');\n\nvar retrieve = new RetrieveAndRankV1({\n  username: '<username>',\n  password: '<password>',\n});\n\nvar solrClient = retrieve.createSolrClient({\n  cluster_id: 'INSERT YOUR CLUSTER ID HERE',\n  collection_name: 'example_collection'\n});\n\n// add a document\nvar doc = { id : 1234, title_t : 'Hello', text_field_s: 'some text' };\nsolrClient.add(doc, function(err) {\n  if(err) {\n    console.log('Error indexing document: ' + err);\n  } else {\n    console.log('Indexed a document.');\n    solrClient.commit(function(err) {\n      if(err) {\n        console.log('Error committing change: ' + err);\n      } else {\n        console.log('Successfully commited changes.');\n      }\n    });\n  }\n});\n\n// search all documents\nvar query = solrClient.createQuery();\nquery.q({ '*' : '*' });\nsolrClient.search(query, function(err, searchResponse) {\n  if(err) {\n    console.log('Error searching for documents: ' + err);\n  } else {\n    console.log('Found ' + searchResponse.response.numFound + ' document(s).');\n    console.log('First document: ' + JSON.stringify(searchResponse.response.docs[0], null, 2));\n  }\n});\n```\n\n### Speech to Text\nUse the [Speech to Text][speech_to_text] service to recognize the text from a .wav file.\n\n```javascript\nvar SpeechToTextV1 = require('watson-developer-cloud/speech-to-text/v1');\nvar fs = require('fs');\n\nvar speech_to_text = new SpeechToTextV1({\n  username: '<username>',\n  password: '<password>'\n});\n\nvar params = {\n  // From file\n  audio: fs.createReadStream('./resources/speech.wav'),\n  content_type: 'audio/l16; rate=44100'\n};\n\nspeech_to_text.recognize(params, function(err, res) {\n  if (err)\n    console.log(err);\n  else\n    console.log(JSON.stringify(res, null, 2));\n});\n\n// or streaming\nfs.createReadStream('./resources/speech.wav')\n  .pipe(speech_to_text.createRecognizeStream({ content_type: 'audio/l16; rate=44100' }))\n  .pipe(fs.createWriteStream('./transcription.txt'));\n```\n\n### Text to Speech\nUse the [Text to Speech][text_to_speech] service to synthesize text into a .wav file.\n\n```js\nvar TextToSpeechV1 = require('watson-developer-cloud/text-to-speech/v1');\nvar fs = require('fs');\n\nvar text_to_speech = new TextToSpeechV1({\n  username: '<username>',\n  password: '<password>'\n});\n\nvar params = {\n  text: 'Hello from IBM Watson',\n  voice: 'en-US_AllisonVoice', // Optional voice\n  accept: 'audio/wav'\n};\n\n// Pipe the synthesized text to a file\ntext_to_speech.synthesize(params).pipe(fs.createWriteStream('output.wav'));\n```\n\n### Tone Analyzer\nUse the [Tone Analyzer][tone_analyzer] service to analyze the\nemotion, writing and social tones of a text.\n\n```js\nvar ToneAnalyzerV3 = require('watson-developer-cloud/tone-analyzer/v3');\n\nvar tone_analyzer = new ToneAnalyzerV3({\n  username: '<username>',\n  password: '<password>',\n  version_date: '2016-05-19'\n});\n\ntone_analyzer.tone({ text: 'Greetings from Watson Developer Cloud!' },\n  function(err, tone) {\n    if (err)\n      console.log(err);\n    else\n      console.log(JSON.stringify(tone, null, 2));\n});\n```\n\n### Tradeoff Analytics\nUse the [Tradeoff Analytics][tradeoff_analytics] service to find the best\nphone that minimizes price and weight and maximizes screen size.\n\n```javascript\nvar TradeoffAnalyticsV1 = require('watson-developer-cloud/tradeoff-analytics/v1');\n\nvar tradeoff_analytics = new TradeoffAnalyticsV1({\n  username: '<username>',\n  password: '<password>'\n});\n\n// From file\nvar params = require('./resources/problem.json');\n\ntradeoff_analytics.dilemmas(params, function(err, res) {\n  if (err)\n    console.log(err);\n  else\n    console.log(JSON.stringify(res, null, 2));\n});\n```\n\n### Visual Recognition\nUse the [Visual Recognition][visual_recognition] service to recognize the\nfollowing picture.\n\n<img src=\"https://visual-recognition-demo.mybluemix.net/images/samples/5.jpg\" width=\"150\" />\n\n```js\nvar VisualRecognitionV3 = require('watson-developer-cloud/visual-recognition/v3');\nvar fs = require('fs');\n\nvar visual_recognition = new VisualRecognitionV3({\n  api_key: '<api_key>',\n  version_date: VisualRecognitionV3.VERSION_DATE_2016_05_20\n});\n\nvar params = {\n  images_file: fs.createReadStream('./resources/car.png')\n};\n\nvisual_recognition.classify(params, function(err, res) {\n  if (err)\n    console.log(err);\n  else\n    console.log(JSON.stringify(res, null, 2));\n});\n```\n\n## Removed services\n\nThe following services are no longer available.\n\n* **AlchemyVision**: Visual Recognition replaced Alchemy Vision with improved billing and a superset of the original features\n* **Concept Insights**: AlchemyLanguage's concept function can be used as a replacement for most Concept Insights use cases; therefore, we encourage existing Concept Insights service users to migrate to AlchemyLanguage.\n* **Relationship Extraction**: You can now access Relationship Extraction models with AlchemyLanguage. See the [migration guide][re_migration] for details.\n* **Message Resonance**: Use Natural Language Understanding or Tone Analyzer to understand the emotions of your audience and messages.\n* **Question and Answer**: Use Conversation or Natural Language Classifier to identify intent and Retrieve and Rank to search for relevant documents.\n* **Visual Insights**: Use Visual Recognition to achieve a similar result\n* **Concept Expansion**: Use Natural Langue Understanding to extract concepts, entities, and more.\n\n## Composing services\n\n### Integration of Tone Analyzer with Conversation\nSample code for [integrating Tone Analyzer and Conversation][conversation_tone_analyzer_example] is provided in the [examples directory][examples].\n\n## Integration of Document Conversion with Retrieve and Rank\nSee the [Document Conversion integration example][document_conversion_integration_example] about how to integrate the Document Conversion service\nwith the Retrieve and Rank service.\n\n## Unauthenticated requests\nBy default, the library tries to use Basic Auth and will ask for `api_key` or `username` and `password` and send an `Authorization: Basic XXXXXXX`. You can avoid this by using:\n\n`use_unauthenticated`.\n\n```javascript\nvar watson = require('watson-developer-cloud');\n\nvar dialog = new watson.DialogV1({\n  use_unauthenticated: true\n});\n```\n\n## Debug\nThis library relies on the `request` npm module writted by\n[request][request_github] to call the Watson Services. To debug the apps, add\n'request' to the `NODE_DEBUG` environment variable:\n\n```sh\n$ NODE_DEBUG='request' node app.js\n```\nwhere `app.js` is your Node.js file.\n\n## Tests\nRunning all the tests:\n```sh\n$ npm test\n```\n\nRunning a specific test:\n```sh\n$ mocha -g '<test name>'\n```\n\n## Open Source @ IBM\n[Find more open source projects on the IBM Github Page.](http://ibm.github.io/)\n\n## License\n\nThis library is licensed under Apache 2.0. Full license text is available in\n[COPYING][license].\n\n## Contributing\nSee [CONTRIBUTING](https://github.com/watson-developer-cloud/node-sdk/blob/master/.github/CONTRIBUTING.md).\n\n[conversation]: https://www.ibm.com/watson/services/conversation/\n[discovery]: https://www.ibm.com/watson/services/discovery/\n[personality_insights]: https://www.ibm.com/watson/services/personality-insights/\n[retrieve_and_rank]: https://www.ibm.com/watson/services/retrieve-and-rank/\n[visual_recognition]: https://www.ibm.com/watson/services/visual-recognition/\n[tone_analyzer]: https://www.ibm.com/watson/services/tone-analyzer/\n[text_to_speech]: https://www.ibm.com/watson/services/text-to-speech/\n[speech_to_text]: https://www.ibm.com/watson/services/speech-to-text/\n[tradeoff_analytics]: https://console.bluemix.net/docs/services/tradeoff-analytics/index.html\n[language_translator]: https://www.ibm.com/watson/services/language-translator/\n[re_migration]: https://console.bluemix.net/docs/services/alchemy-language/migration.html\n[alchemy_language]: https://console.bluemix.net/docs/services/alchemy-language/index.html\n[alchemy_data_news]: https://console.bluemix.net/docs/services/alchemydata-news/index.html\n\n[bluemix]: https://console.bluemix.net\n[npm_link]: https://www.npmjs.com/package/watson-developer-cloud\n[request_github]: https://github.com/request/request\n[dialog_migration]: https://console.bluemix.net/docs/services/conversation/index.html\n[language-translator-migration]: https://console.bluemix.net/docs/services/language-translator/migrating.html\n\n[examples]: https://github.com/watson-developer-cloud/node-sdk/tree/master/examples\n[document_conversion_integration_example]: https://github.com/watson-developer-cloud/node-sdk/tree/master/examples/document_conversion_integration.v1.js\n[conversation_tone_analyzer_example]: https://github.com/watson-developer-cloud/node-sdk/tree/master/examples/conversation_tone_analyzer_integration\n\n[license]: http://www.apache.org/licenses/LICENSE-2.0\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/watson-developer-cloud/node-sdk.git"
  },
  "scripts": {
    "autofix": "eslint . --fix",
    "browserify": "browserify index.js --standalone Watson --outfile dist/watson.js",
    "build": "npm run browserify && npm run minify",
    "compat-check": "eslint --print-config .eslintrc.js | eslint-config-prettier-check",
    "doc": "jsdoc -c scripts/jsdoc/config.json",
    "lint": "npm run compat-check && eslint . --cache && dependency-lint",
    "minify": "uglifyjs --compress --mangle --screw-ie8 dist/watson.js --output dist/watson.min.js --preamble \"// Watson Developer Cloud\n// JavaScript SDK$npm_package_version\n// Generated at `date`\n// Copyright IBM ($npm_package_license)\n// $npm_package_homepage\"",
    "test": "npm run lint && mocha test/unit test/integration",
    "test-browser": "karma start --single-run",
    "test-integration": "mocha test/integration",
    "test-unit": "npm run lint && mocha test/unit/",
    "watch": "npm run test-unit -- --watch",
    "watch-doc": "nodemon --watch ./ --ext js,tmpl,json --ignore dist/ --ignore doc/ --ignore test/ --ignore examples/ --exec npm run doc",
    "watchify": "watchify index.js --standalone Watson --outfile dist/watson.js --debug --verbose"
  },
  "version": "2.39.2"
}
